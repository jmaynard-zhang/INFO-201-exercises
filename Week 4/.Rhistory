# all my r coding :)))
variable <- 1
# Lab 02 - Basic R Exercise
# Create a variable `hometown` that stores the city in which you were born
# Assign your name to the variable `my_name`
# Assign your height (in inches) to a variable `my_height`
# Create a variable `puppies` equal to the number of puppies you'd like to have
# Create a variable `puppy_price`, which is how much you think a puppy costs
# Create a variable `total_cost` that has the total cost of all of your puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
# Assign your height (in inches) to a variable `my_height`
# Create a variable `puppies` equal to the number of puppies you'd like to have
# Create a variable `puppy_price`, which is how much you think a puppy costs
# Create a variable `total_cost` that has the total cost of all of your puppies
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
# Create a variable `hometown` that stores the city in which you were born
hometown <- 'Cincinnati, OH' # <- = ALT+-
# Assign your name to the variable `my_name`
my_name <- 'Jasper'
# Assign your height (in inches) to a variable `my_height`
height <- 72
# Create a variable `puppies` equal to the number of puppies you'd like to have
puppies <- 10000000
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total <- puppies * puppy_price # hit tab to auto-fill variables
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price # hit tab to auto-fill variables
total_cost
total_cost
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- "1000"
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price # hit tab to auto-fill variables
# Create a variable `puppy_price`, which is how much you think a puppy costs
puppy_price <- 1000
# Create a variable `total_cost` that has the total cost of all of your puppies
total_cost <- puppies * puppy_price # hit tab to auto-fill variables
# Create a boolean variable `too_expensive`, set to TRUE if the cost is greater
# than $1,000
too_expensive <-
if (total_cost > 1000) {
too_expensive <- TRUE
} else {
too_expensive <- FALSE
}
too_expensive
total_cost > 1000
too_expensive <- total_cost > 1000
remove(total)
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- 1000/puppy_price
max_puppies
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- puppies/puppy_price
max_puppies
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- puppies/300
max_puppies
floor(puppies/300)
max_puppies <- puppies%/%300
max_puppies
# Create a variable `max_puppies`, which is the number of puppies you can
# afford for $1,000
max_puppies <- floor(1000/puppy_price)
max_puppies <- 1000%/%puppy_price
source("~/.active-rstudio-document")
source("C:/Users/maynj/OneDrive/Documents/INFO 201/Week 3/str_manip_key.R")
source("C:/Users/maynj/OneDrive/Documents/INFO 201/Week 3/vector_key.R")
source("C:/Users/maynj/OneDrive/Documents/INFO 201/Week 3/str_manip_key.R")
source("C:/Users/maynj/OneDrive/Documents/INFO 201/Week 3/str_manip_key.R")
source("C:/Users/maynj/OneDrive/Documents/INFO 201/Week 3/vector_key.R")
source("C:/Users/maynj/OneDrive/Documents/INFO 201/Week 3/vector_key.R")
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
?substr
help(lyric)
help(substr)
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
intro
?nchar
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
length <- nchar(lyric)
length
fruit <- substr(lyric, 15, nchar(lyric))
fruit
fruit <- substr(lyric, 15, length)
fruit
?gsub
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub("a", "ee", lyric)
fruits_e
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a","o",lyric)
fruits_o
intro
gsub("a","e", fruit)
paste(intro, gsub("a","e", fruit))
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
fruits_e <- paste(intro, gsub("a","e", fruit))
fruits_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
fruits_e2 <- gsub("a","e", fruit)
fruits_e <- paste(intro, fruits_e2)
fruits_e
fruits_e
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
fruits_e <- gsub("a","e", fruit)
fruits_e
fruits_e_result <- paste(intro, fruits_e)
fruits_e_result <- paste(intro, gsub("a","e", fruit))
fruits_e_result
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
fruits_o <- paste(intro, gsub("a","o",fruits))
fruits_o
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
fruits_o <- paste(intro, gsub("a","o",fruit))
fruits_o
# Create a vector `words` of 6 (or more) words.
# You can Google for a "random word generator" if you wish!
words <- c('fruit', 'word', 'fantastic', 'youngboy', 'slay', 'tough')
words
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words,"is the word of the day")
words_of_the_day
words_of_the_day <- c(paste(words, "is the word of the day!"))
words_of_the_day
# Create a vector `words_of_the_day` that is your `words` vector with the string
# "is the word of the day!" pasted on to the end.
# BONUS: Surround the word in quotes (e.g., `'data' is the word of the day!`)
# Note that the results are more obviously correct with single quotes.
words_of_the_day <- paste(words,"is the word of the day")
words_of_the_day
# Define a function `word_bin` that takes in three arguments: a vector of words,
# and two letters. The function should return a vector of words that go between
# those letters alphabetically.
word_bin <- function(words, start, end){
words[words >= start & substr(words, 1, 1) <= end]
}
# Use your `word_bin` function to determine which of your words start with "e"
# through "q"
word_bin(words, "e", "q")
"fruit" > "fantastic"
"fantastic" > "fruit"
parks <- c(“North Cascades, WA”, “Glacier, MT”, “Olympic, WA”, “Great Smoky Mountains, TN”, “Rainier, WA”, “Yosemite, CA”)
parks <- c(“North Cascades, WA”, “Glacier, MT”, “Olympic, WA”, “Great Smoky Mountains, TN”, “Rainier, WA”, “Yosemite, CA”)
parks <- c('North Cascades, WA', 'Glacier, MT')
sum(str_detect(parks, 'WA'))
library(stringr)
install.packages("stringr")
library(stringr)
parks <- c('North Cascades, WA', 'Glacier, MT')
sum(str_detect(parks, 'WA'))
sum(TRUE, FALSE, TRUE, FALSE, TRUE, FALSE)
str_detect(parks, 'WA')
lintr:::addin_lint()
setwd("C:/Users/maynj/OneDrive/Documents/INFO 201/Week 4")
lint("external_df_key.R")
library(lintr)
lint("external_df_key.R")
lint("external_df_key.R")
lint("external_df_key.R")
lintr:::addin_lint()
lint("external_df_key.R")
lint("external_df_key.R")
lintr:::addin_lint()
